//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

import { type SchemaDef, ExpressionUtils } from "@zenstackhq/runtime/schema";
import { toDialectConfig } from "@zenstackhq/runtime/utils/pg-utils";
export const schema = {
    provider: {
        type: "postgresql",
        dialectConfigProvider: function () {
            return toDialectConfig(process.env['DATABASE_URL']);
        }
    },
    models: {
        AnatomyPart: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                partId: {
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                name: {
                    type: "String"
                },
                latinName: {
                    type: "String",
                    optional: true
                },
                meshName: {
                    type: "String",
                    optional: true
                },
                system: {
                    type: "AnatomySystem"
                },
                parentId: {
                    type: "String",
                    optional: true,
                    foreignKeyFor: [
                        "parent"
                    ]
                },
                parent: {
                    type: "AnatomyPart",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("PartHierarchy") }, { name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("parentId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "children", name: "PartHierarchy", fields: ["parentId"], references: ["id"] }
                },
                children: {
                    type: "AnatomyPart",
                    array: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("PartHierarchy") }] }],
                    relation: { opposite: "parent", name: "PartHierarchy" }
                },
                modelPath: {
                    type: "String",
                    optional: true
                },
                lodLevels: {
                    type: "Json",
                    optional: true
                },
                boundingBox: {
                    type: "Json",
                    optional: true
                },
                synonyms: {
                    type: "AnatomySynonym",
                    array: true,
                    relation: { opposite: "part" }
                },
                createdAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                }
            },
            attributes: [
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("system")]) }] },
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("partId")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                partId: { type: "String" }
            }
        },
        AnatomySynonym: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                partId: {
                    type: "String",
                    foreignKeyFor: [
                        "part"
                    ]
                },
                part: {
                    type: "AnatomyPart",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("partId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "synonyms", fields: ["partId"], references: ["id"], onDelete: "Cascade" }
                },
                synonym: {
                    type: "String"
                },
                language: {
                    type: "String",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal("en") }] }],
                    default: "en"
                },
                priority: {
                    type: "Int",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(0) }] }],
                    default: 0
                }
            },
            attributes: [
                { name: "@@unique", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("partId"), ExpressionUtils.field("synonym"), ExpressionUtils.field("language")]) }] },
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("synonym")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                partId_synonym_language: { partId: { type: "String" }, synonym: { type: "String" }, language: { type: "String" } }
            }
        },
        TeachingSession: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                code: {
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                teacherId: {
                    type: "String"
                },
                title: {
                    type: "String"
                },
                isActive: {
                    type: "Boolean",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(true) }] }],
                    default: true
                },
                highlightedPart: {
                    type: "String",
                    optional: true
                },
                cameraPosition: {
                    type: "Json",
                    optional: true
                },
                modelRotation: {
                    type: "Json",
                    optional: true
                },
                visibleSystems: {
                    type: "String",
                    array: true
                },
                slicePosition: {
                    type: "Json",
                    optional: true
                },
                notes: {
                    type: "SessionNote",
                    array: true,
                    relation: { opposite: "session" }
                },
                students: {
                    type: "SessionStudent",
                    array: true,
                    relation: { opposite: "session" }
                },
                commands: {
                    type: "VoiceCommand",
                    array: true,
                    relation: { opposite: "session" }
                },
                createdAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                },
                updatedAt: {
                    type: "DateTime",
                    updatedAt: true,
                    attributes: [{ name: "@updatedAt" }]
                },
                endedAt: {
                    type: "DateTime",
                    optional: true
                }
            },
            attributes: [
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("code")]) }] },
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("isActive")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                code: { type: "String" }
            }
        },
        SessionStudent: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                sessionId: {
                    type: "String",
                    foreignKeyFor: [
                        "session"
                    ]
                },
                session: {
                    type: "TeachingSession",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "students", fields: ["sessionId"], references: ["id"], onDelete: "Cascade" }
                },
                studentId: {
                    type: "String"
                },
                joinedAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                }
            },
            attributes: [
                { name: "@@unique", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId"), ExpressionUtils.field("studentId")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" },
                sessionId_studentId: { sessionId: { type: "String" }, studentId: { type: "String" } }
            }
        },
        SessionNote: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                sessionId: {
                    type: "String",
                    foreignKeyFor: [
                        "session"
                    ]
                },
                session: {
                    type: "TeachingSession",
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("Cascade") }] }],
                    relation: { opposite: "notes", fields: ["sessionId"], references: ["id"], onDelete: "Cascade" }
                },
                studentId: {
                    type: "String"
                },
                content: {
                    type: "String",
                    attributes: [{ name: "@db.Text" }]
                },
                timestamp: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                }
            },
            attributes: [
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId"), ExpressionUtils.field("studentId")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" }
            }
        },
        VoiceCommand: {
            fields: {
                id: {
                    type: "String",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("cuid") }] }],
                    default: ExpressionUtils.call("cuid")
                },
                sessionId: {
                    type: "String",
                    optional: true,
                    foreignKeyFor: [
                        "session"
                    ]
                },
                session: {
                    type: "TeachingSession",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }, { name: "onDelete", value: ExpressionUtils.literal("SetNull") }] }],
                    relation: { opposite: "commands", fields: ["sessionId"], references: ["id"], onDelete: "SetNull" }
                },
                transcript: {
                    type: "String",
                    attributes: [{ name: "@db.Text" }]
                },
                intent: {
                    type: "String",
                    optional: true
                },
                action: {
                    type: "String",
                    optional: true
                },
                target: {
                    type: "String",
                    optional: true
                },
                confidence: {
                    type: "Float",
                    optional: true
                },
                success: {
                    type: "Boolean",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.literal(true) }] }],
                    default: true
                },
                errorMsg: {
                    type: "String",
                    optional: true
                },
                userId: {
                    type: "String",
                    optional: true
                },
                createdAt: {
                    type: "DateTime",
                    attributes: [{ name: "@default", args: [{ name: "value", value: ExpressionUtils.call("now") }] }],
                    default: ExpressionUtils.call("now")
                }
            },
            attributes: [
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("sessionId")]) }] },
                { name: "@@index", args: [{ name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("createdAt")]) }] }
            ],
            idFields: ["id"],
            uniqueFields: {
                id: { type: "String" }
            }
        }
    },
    enums: {
        AnatomySystem: {
            SKELETAL: "SKELETAL",
            MUSCULAR: "MUSCULAR",
            NERVOUS: "NERVOUS",
            CARDIOVASCULAR: "CARDIOVASCULAR",
            RESPIRATORY: "RESPIRATORY",
            DIGESTIVE: "DIGESTIVE",
            URINARY: "URINARY",
            REPRODUCTIVE: "REPRODUCTIVE",
            ENDOCRINE: "ENDOCRINE",
            LYMPHATIC: "LYMPHATIC",
            INTEGUMENTARY: "INTEGUMENTARY"
        },
        CommandAction: {
            SHOW: "SHOW",
            HIDE: "HIDE",
            HIGHLIGHT: "HIGHLIGHT",
            ISOLATE: "ISOLATE",
            ROTATE: "ROTATE",
            ZOOM: "ZOOM",
            SLICE: "SLICE",
            RESET: "RESET",
            SYSTEM_TOGGLE: "SYSTEM_TOGGLE"
        }
    },
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
