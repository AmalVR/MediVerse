# Development Docker Compose with optimized builds
# Run with: ./scripts/dev-environment.sh setup

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mediverse-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: mediverse
      POSTGRES_PASSWORD: mediverse_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    networks:
      - mediverse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mediverse -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: mediverse-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - mediverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Service (optimized build)
  api:
    image: mediverse-dev-api:latest
    container_name: mediverse-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://mediverse:mediverse_password@postgres:5432/mediverse
      MOODLE_DB_URL: postgresql://mediverse:mediverse_password@postgres:5432/moodle
      MOODLE_URL: http://moodle:80
      MOODLE_API_URL: http://moodle:80/webservice/rest/server.php
      MOODLE_API_TOKEN: ${MOODLE_API_TOKEN:-placeholder_token}
      MOODLE_OAUTH_CLIENT_ID: ${VITE_MOODLE_OAUTH_CLIENT_ID:-placeholder_client_id}
      MOODLE_OAUTH_CLIENT_SECRET: ${VITE_MOODLE_OAUTH_CLIENT_SECRET:-placeholder_client_secret}
      MOODLE_OAUTH_REDIRECT_URI: ${VITE_MOODLE_OAUTH_REDIRECT_URI:-http://localhost:8080}
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server:/app/server
      - ./prisma:/app/prisma
      - ./generated:/app/generated
      - ./node_modules/.prisma:/app/node_modules/.prisma
      - ./.env:/app/.env:ro
    networks:
      - mediverse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Moodle LMS (optimized build)
  moodle:
    image: mediverse-dev-moodle:latest
    container_name: mediverse-moodle-dev
    restart: unless-stopped
    environment:
      OAUTH_CLIENT_ID: ${VITE_MOODLE_OAUTH_CLIENT_ID:-placeholder_client_id}
      OAUTH_CLIENT_SECRET: ${VITE_MOODLE_OAUTH_CLIENT_SECRET:-placeholder_client_secret}
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - moodle_dev_data:/var/moodledata
      - ./docker/moodle:/docker-entrypoint-initdb.d
    networks:
      - mediverse-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mediverse-pgadmin-dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@mediverse.local
      PGADMIN_DEFAULT_PASSWORD: dev
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - mediverse-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  mediverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_dev_data:
  pgadmin_dev_data:
  moodle_dev_data:
# Development workflow:
# 1. Run: ./scripts/dev-environment.sh setup
# 2. This will build optimized images and start all services
# 3. Frontend runs locally: npm run dev
# 4. API and Moodle run in Docker with proper networking
#
# Benefits:
# - Images are built once and cached
# - Proper health checks and dependencies
# - Isolated network for better connectivity
# - Automatic database initialization
